npx jest
 FAIL  ./customReplace.test.js
  Expense Management System
    addExpense
      √ should add a valid expense (1 ms)
      √ should not add an expense with a negative amount
      √ should not add an expense with an empty category
    editExpense
      × should edit a valid expense (3 ms)
      √ should not edit an expense with a non-existent ID
      √ should not edit an expense with a negative amount
    deleteExpense
      √ should delete an expense
      √ should not delete an expense with a non-existent ID
    generateCategorySummary
      × should summarize expenses by category (1 ms)
    generateMonthlyReport
      × should generate a monthly report                                                                                                                           
      √ should generate a report for an empty month                                                                                                                
    findMostExpensiveExpense                                                                                                                                       
      √ should find the most expensive expense (2 ms)                                                                                                              
      √ should return null for an empty expense list (1 ms)                                                                                                        
    printAllExpenses                                                                                                                                               
      × should print all expenses                                                                                                                                  
                                                                                                                                                                   
  ● Expense Management System › editExpense › should edit a valid expense                                                                                          
                                                                                                                                                                   
    expect(received).toBe(expected) // Object.is equality

    Expected: "Winter clothes"
    Received: "Clothes"

      90 |         test('should edit a valid expense', () => {
      91 |             editExpense(3, { description: 'Winter clothes' });
    > 92 |             expect(expenses[2].description).toBe('Winter clothes');
         |                                             ^
      93 |         });
      94 |
      95 |         test('should not edit an expense with a non-existent ID', () => {

      at Object.<anonymous> (customReplace.test.js:92:45)

  ● Expense Management System › generateCategorySummary › should summarize expenses by category

    expect(received).toBe(expected) // Object.is equality

    Expected: 50.5
    Received: 75.5

      119 |         test('should summarize expenses by category', () => {
      120 |             const summary = generateCategorySummary();
    > 121 |             expect(summary.Food).toBe(50.5);
          |                                  ^
      122 |             expect(summary.Shopping).toBe(150);
      123 |         });
      124 |     });

      at Object.<anonymous> (customReplace.test.js:121:34)

  ● Expense Management System › generateMonthlyReport › should generate a monthly report

    expect(received).toBe(expected) // Object.is equality

    Expected: 215.5
    Received: 225.5

      127 |         test('should generate a monthly report', () => {
      128 |             const report = generateMonthlyReport('2024-12');
    > 129 |             expect(report).toBe(215.5);
          |                            ^
      130 |         });
      131 |
      132 |         test('should generate a report for an empty month', () => {

      at Object.<anonymous> (customReplace.test.js:129:28)

  ● Expense Management System › printAllExpenses › should print all expenses

    expect(received).toBe(expected) // Object.is equality

    Expected: 4
    Received: 0

      153 |         test('should print all expenses', () => {
      154 |             const allExpenses = printAllExpenses();
    > 155 |             expect(allExpenses.length).toBe(4);
          |                                        ^
      156 |             expect(allExpenses[0]).toBe('#1 | 2024-12-01 | Food | $20.5 | Lunch');
      157 |         });
      158 |     });

      at Object.<anonymous> (customReplace.test.js:155:40)

Test Suites: 1 failed, 1 total                                                                                                                                     
Tests:       4 failed, 10 passed, 14 total                                                                                                                         
Snapshots:   0 total
Time:        0.462 s, estimated 1 s
Ran all test suites.