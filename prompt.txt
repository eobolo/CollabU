Here is the Python code for an order management system designed to handle customer orders in a retail or e-commerce setting. Your task is to generate unit tests for this code to ensure its reliability in real-world scenarios. For example, imagine this system is used by a company to manage orders during peak shopping seasons, such as Black Friday or holiday sales. The system must handle adding new orders, processing high-priority orders before others, and accurately saving and loading orders from a file.

Write unit tests to verify the functionality of individual methods and functions in isolation. Ensure the tests cover normal scenarios, such as adding valid orders, processing high-priority orders, and viewing pending orders. Also, include edge cases, like handling orders with no items, very large orders, or invalid characters in customer names. Additionally, test error cases, such as attempting to add a duplicate order ID or loading a corrupted orders file. Use a testing framework like unittest to write Python test code that includes setup, execution, and assertions for each test case. Structure your tests with clear and descriptive names, ensuring they reflect this real-world retail context for maintainability and usability. The test cases should be written inside of the provided python code.
