==================================================
PROMPT3


You are tasked with developing an Order Management System for a coffee shop that ensures orders are handled fairly and efficiently. The system must enforce strict rules to process orders based on their priority and order of arrival. Each order will contain a unique Order ID, Customer Name, list of Items, a Priority Status (high-priority or non-priority), and an `Order Status`, which is pending by default. Orders must always be processed in the correct order, ensuring that high-priority orders are completed first, and within the same priority group, the earliest order must be processed first. If a cashier attempts to process an order out of this sequence, the system should reject the action and display an appropriate, user-friendly message ("Oops! Please You must process orders in sequence. Please check and try again!") reminding them to follow the correct order. The system must also include robust file-handling capabilities for persistent storage and retrieval of orders. The program should handle cases such as file corruption, incorrect data formats, and empty files gracefully by initializing or correcting the order file as needed. Additionally, the system should allow users to add new orders, view pending orders sorted according to the priority rules, and mark orders as completed following the enforced sequence.



=====================================================
prompt4
I need to build a Health Clinic Appointment Scheduling System in Python that manages doctor-patient appointments efficiently through a command-line interface. The program should allow the user to schedule new appointments, view the clinic's schedule, check-in appointments, and cancel them. Each appointment must include a unique appointment_id, patient_name, doctor_name, appointment_time in the format YYYY-MM-DD HH:MM, and a status that defaults to scheduled. There are six doctors available: Akani, Abiodun, Excel, Merveille, Emmanuel, and Faith. The system must prevent scheduling conflicts for the same doctor by enforcing a 45-minute buffer between consecutive appointments, while still allowing appointments for different doctors at overlapping times. If a user attempts to book an appointment within the restricted window, the system should display the latest scheduled time for that doctor and prompt the user with an option to override the conflict. The program must persist appointment data in a JSON file named appointments.json, ensuring data is saved and reloaded correctly between sessions. Additionally, the program should include robust error handling for invalid inputs and corrupted files while providing a user-friendly menu with options to manage the appointments seamlessly. The goal is to create a system that is simple, efficient, and avoids booking conflicts for individual doctors.


==================================================================
PROMPT5
In this task, you are required to design and implement an event ticketing system using Python. The system should allow users to manage events, book tickets, cancel tickets, and handle various administrative actions. The first task is to create an Event class that stores details about each event, including its ID, name, date and time, total seats, available seats, ticket price, and status. The event status should be updated to sold out if the available seats reach zero. The system should allow users to add new events, ensuring that events are not scheduled in the past. Additionally, the event’s ticket price should be dynamically updated if fewer than five seats remain, with a maximum ticket price limit.

Next, a User class should be implemented to manage users, storing their ID, name, and booked tickets. The user should have the ability to book tickets for events, and their bookings should be stored in a list. Users should be able to cancel their tickets, with refunds based on the number of canceled tickets. If a user cancels all their tickets, they should be removed from the system. The system should prevent users from booking more tickets than available for an event and should check if an event is starting soon before allowing bookings.

The system should also allow event cancellations, where the event is removed, and all users who have booked tickets are refunded. Additionally, the user interface should enable users and admins to view all events, sorted either by date or price. This functionality should include displaying key event details such as the event’s ID, name, time, price, status, and available seats.

For data persistence, events and users should be stored in JSON files, with functions to load data from the files at the start of the program and save any changes back when events are added, tickets are booked or canceled, or users are updated. The system should handle edge cases such as booking tickets for a sold-out event, attempting to cancel more tickets than booked, or entering invalid input formats, such as incorrect dates or negative values. The system should provide a user-friendly command-line interface, allowing users to perform all necessary operations with ease, and be modular to facilitate future extensions.

=================================================================
Prompt 6

You are tasked with building an Aircraft Component Management System for an aerospace engineering team to manage the lifecycle of aircraft components. Each component has a unique ID, name, weight, material strength, cost, and status (such as "under design," "tested," or "approved"). Engineers should be able to add components, ensuring IDs are unique, and input values like weight and material strength, where the cost is dynamically calculated using the formula: base cost of $500, adding $10 for every kilogram of weight and $5 for every unit of material strength. Higher weight and strength will increase the cost. Components can be modified, but once they reach later stages like "tested" or "approved," modifications are restricted unless they are reset to their initial state where they can undergo changes. Engineers must test components to ensure they meet safety standards: if the weight is less than or equal to 500 kg and the material strength is greater than or equal to 300, the component passes the test; otherwise, it fails. The testing process updates the component's status to "tested" if it passes. Only successfully tested components can be approved. Components should also be viewable, sorted by either cost or weight for review, and the system should handle invalid inputs gracefully, such as duplicate IDs, invalid values, or inappropriate modifications. The data must be saved and loaded seamlessly so engineers can resume their work without loss of progress.