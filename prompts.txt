
PROMPT 1
====================================
As a supply chain Engineer, you are tasked with managing the production cycles of a manufacturing plant that produces various products, each with different production requirements and dependencies. In this plant, each product has a specific type (e.g., "Coffee dust", "Coffee cups", "coffee sealing"), a number of days required to produce it, and it may depend on other products being completed before it can start. The objective is to calculate the total time required to complete all products, taking into account the dependencies between them.

The factory's production process follows strict rules: a product cannot start production until all of its dependencies are finished, and multiple products that depend on the same product can start simultaneously once the dependency is completed. However, if there are circular dependencies—where Product 1 depends on Product 2, which in turn depends on Product 1—your program must identify and flag this as an "Invalid Cycle Detected." Furthermore, if the product list has any invalid inputs, such as non-existent dependencies or missing required keys, the program should output "Invalid Input."

The input is provided as a list of dictionaries, where each dictionary represents a product with the following information: its "type" (a string), the "days" (an integer) it takes to produce the product, and the "dependency" (a list of integers) that represent other products this one depends on. If the list is empty, it means the product has no dependencies. Your program should ensure the input adheres to the constraints: the product list must not have missing keys or invalid values (e.g., dependencies referencing products that do not exist). Additionally, the program should handle edge cases such as products with no dependencies or invalid indices efficiently.

The program should output the total number of days required to complete all products if all constraints are met. If a circular dependency is detected, it should output "Invalid Cycle Detected." Similarly, if any invalid input, such as out-of-bound dependencies or missing keys, is provided, it should output "Invalid Input." You must ensure that your solution is efficient enough.

PROMPT 2
=====================================
As a Library Technician the checkout system of a library that holds multiple copies of books, each of which can be borrowed by users. The library has a collection of books, and each book has a set of attributes: a unique identifier "book_id", title, author, the number of copies available for checkout "copies_available", the fine charged per day for overdue books "fine_per_day", and the current status of the book which can be "available", "checked_out", or "overdue". The library also manages a list of users, each identified by a unique user_id. These users can borrow multiple books, and their overdue fines are tracked individually.

When a user checks out a book, the system decreases the number of available copies copies_available" by one and updates the book’s status to "checked_out". Each book has a due date, and when it is returned, the system checks if the book was returned on time or overdue. If the book is returned after the due date, the book’s status changes to "overdue", and an overdue fine is calculated based on how many days the book was late and the fine per day. If the book is returned on time, its status is updated to "available".

Once a book is returned overdue, the user is prompted to pay the fine. A user can only pay the fine for books they have borrowed. The system tracks which user owes a fine for which book and allows payment once the fine has been calculated. The book's status will then be updated to "available" after the fine is paid.

In the event that a book is checked out with no available copies, the system should prevent the checkout and return an error. Similarly, if a user tries to return a book they haven’t borrowed, or tries to checkout a book that does not exist, the system should return an "Invalid Input" message. Additionally, the system should handle edge cases like adding a book with an already existing "book_id" by returning the message "Book ID Already Exists".